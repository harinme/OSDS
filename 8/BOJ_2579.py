'''
백준 2579 계단오르기

(!) 계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 
    즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.
(2) 연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.
(3) 마지막 도착 계단은 반드시 밟아야 한다.

각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최댓값
'''

'''
리스트에 넣고 visited 배열 만들고
큐에 현재 위치랑 총점 넣기
pop 해서 만약 현재 위치가 2보다 크고 visited 배열 확인햇을 때 이전과 전전에 방문햇으면 무조건 두칸
한칸 오르거나 두칸 오르기 -> 방문 처리 후 
만약 visited 배열 확인햇을 때 이전에 연속 2번 방문햇으며 다음은 무조건 두칸 뛰기
만약 현재 위치가 마지막 계단이면 총점 반환 >??

'''

'''
클로드한테 얻은 힌트

상태를 (현재 위치, 마지막 이동 방법) 으로 정의해야 함
예시)
- (i, 1) : i번째 계단에 1칸 올라서 도달
- (i, 2) : i번째 계단에 2칸 올라서 


1. 길이가 N+1 인 dp 테이블 정의
2. 첫번째 계단 : dp[1][1], 
    두번째 계단 : dp[2][1], dp[2][2]

'''

#=======================================================================

'''
i번째 계단을 밟을 때 선택지 두 개
(1) i-2번 계단에서 2칸 뛰기
(2) i-1번 계단에서 1칸 뛰기 -> i-3번 계단에서 2칸 뛰어서 i-1번 계단 

3칸 연속 뛰는 게 금지가 아니라
3칸 연속 밟는 게 금지!!

dp[i] = max(dp[i-2] + arr[i], dp[i-3]+dp[i-1]+arr[i])
'''

N = int(input())
arr = [0] + [int(input().strip()) for _ in range(N)]
 
if N == 1:
    print(arr[1])
elif N == 2:
    print(arr[1]+arr[2])
else:
    dp = [0] * (N + 1)
    dp[1] = arr[1]
    dp[2] = arr[1] + arr[2]
    for i in range(3, N+1):
        dp[i] = max(dp[i-2]+arr[i], dp[i-3]+arr[i-1]+arr[i])

    print(dp[N])