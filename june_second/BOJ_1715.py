'''
카드 정렬하기

문제
20장의 숫자 카드 묶음과 30장의 숫자 카드 묶음을 합치려면 50번의 비교가 필요하다.
예를 들어 10장, 20장, 40장의 묶음이 있다면 10장과 20장을 합친 뒤, 
합친 30장 묶음과 40장을 합친다면 (10 + 20) + (30 + 40) = 100번의 비교가 필요하다.
그러나 10장과 40장을 합친 뒤, 합친 50장 묶음과 20장을 합친다면
(10 + 40) + (50 + 20) = 120 번의 비교가 필요하므로 덜 효율적인 방법이다.

N개의 숫자 카드 묶음의 각각의 크기가 주어질 때, 
최소한 몇 번의 비교가 필요한지를 구하는 프로그램을 작성하시오.

풀이
가장 작은 카드묶음부터 오름차순으로 나열
작은 것끼리 먼저 합치고 합친 결과를 heap에 넣기 
- 10, 20, 40 있을 때 10, 20을 heap에서 빼서 더하고 다시 heap에 넣고,,>?
최소힙으로 계속 오름차순을 유지하면서 작은거 두개를 더하고 heap에 넣는 걸 반복,,
'''

import heapq

N = int(input())

cards = []
for _ in range(N):
    cards.append(int(input()))

# 입력받은 카드묶음으로 최소힙 생성
heapq.heapify(cards)

total = 0
while len(cards) >1:    # cards 배열 안에 숫자 하나만 남을 때까지 (총합)
    card_1 = heapq.heappop(cards)
    card_2 = heapq.heappop(cards)

    # 가장 작은 장수를 가진 카드묶음끼리 더하기
    cost = card_1 + card_2
    # 총 합에 더해주기 
    total += cost 

    # 가장 작은 두카드가 제거된 카드배열과, 더한 카드 장수를 다시 최소힙에 넣기
    heapq.heappush(cards, cost)

print(total)
